
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path
from tkinter.filedialog import askopenfilename
from tkinter import filedialog
import pymsgbox
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Checkbutton, messagebox
from tkinter import *
from Bio.SeqIO.FastaIO import SimpleFastaParser
import pandas as pd
import csv
import webbrowser
import os


import subprocess

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path("./assets")

pd.options.mode.chained_assignment = None  # default='warn'

window = Tk()

window.geometry("778x870")
window.configure(bg = "#423C56")
window.title('EndoGenius v2.0.0')

input_path_MS2 = StringVar()
input_path_format_MS2 = StringVar()
mz_range_min = StringVar()
mz_range_max = StringVar()
min_intensity = StringVar()
max_precursor_z = StringVar()
max_fragment_z = StringVar()
database_csv_path = StringVar()
target_peptide_list_path = StringVar()
fasta_path = StringVar()
precursor_err = StringVar()
fragment_err = StringVar()
max_mods_pep = StringVar()
min_motif_len = StringVar()
min_motif_len.set('3')
amid_var = IntVar()
ox_var = IntVar()
pgE_var = IntVar()
sulf_var = IntVar()
pgQ_var = IntVar()
DiLeu = IntVar()
DiLeu_Nterm = IntVar()
s_phospho_var = IntVar()


motif_db_path = StringVar()
confident_coverage_threshold = StringVar()
standard_err = StringVar()
max_adjacent_swapped_AAs = StringVar()
FDR_threshold = StringVar()
max_swapped_AA = StringVar()
output_dir_path = StringVar()
eg_threshold = StringVar()


input_path_MS2.set(r"C:\Users\lawashburn\Documents\EndoGeniusDistributions\version_assessment_input\dileu_unittests\20240523_DiLeu_TR1_240523184202.ms2")
# #input_path_format_MS2.set(r"C:\Users\lawashburn\Documents\EndoGeniusDistributions\version_assessment_input\db_formatted\2021_0817_CoG_1.txt")
mz_range_min.set('50')
mz_range_max.set('3000')
min_intensity.set('1000')
max_precursor_z.set('8')
max_fragment_z.set('4')
# # database_csv_path.set(r"C:\Users\lawashburn\Documents\EndoGeniusDistributions\version_assessment_input\db_formatted\short_db_w_decoy.csv")
# # target_peptide_list_path.set(r"C:\Users\lawashburn\Documents\EndoGeniusDistributions\version_assessment_input\db_formatted\short_target_list.csv")
fasta_path.set(r"C:\Users\lawashburn\Documents\EndoGeniusDistributions\version_assessment_input\dileu_unittests\even_shorter_dileu_fasta.fasta")
precursor_err.set('20')
fragment_err.set('0.02')
max_mods_pep.set('5')
amid_var.set(1)
ox_var.set(1)
pgE_var.set(1)
sulf_var.set(1)
pgQ_var.set(1)
DiLeu.set(1)
DiLeu_Nterm.set(1)
# #s_phospho_var.set(1)
motif_db_path.set(r"C:\Users\lawashburn\Documents\EndoGeniusDistributions\version_assessment_input\dileu_unittests\motif_db_20230621.csv")
confident_coverage_threshold.set('70')
standard_err.set('0.1') ###KEEP
max_adjacent_swapped_AAs.set('2') ###KEEP
FDR_threshold.set('5')
max_swapped_AA.set('1') ###KEEP
output_dir_path.set(r"C:\Users\lawashburn\Documents\EndoGeniusDistributions\version_assessment_output\EndoGenius_v2.0.0")
# #eg_threshold.set('1000')

def reporter_ion_extraction_begin():
    extract_window = Toplevel(window)
    extract_window.geometry("750x670")
    extract_window.configure(bg = "#423C56")
    extract_window.attributes("-topmost", True)
    extract_window.title('Reporter Ion Extraction')
    
    exportdirectorypath = StringVar()
    importdirectorypath = StringVar()
    importspectrapath = StringVar()
    errorthreshold = StringVar()

    twelveplex_1_name_entry = StringVar()
    twelveplex_2_name_entry = StringVar()
    twelveplex_3_name_entry = StringVar()
    twelveplex_4_name_entry = StringVar()
    twelveplex_5_name_entry = StringVar()
    twelveplex_6_name_entry = StringVar()
    twelveplex_7_name_entry = StringVar()
    twelveplex_8_name_entry = StringVar()
    twelveplex_9_name_entry = StringVar()
    twelveplex_10_name_entry = StringVar()
    twelveplex_11_name_entry = StringVar()
    twelveplex_12_name_entry = StringVar()
    
    twelveplex_1_mass_entry = StringVar()
    twelveplex_2_mass_entry = StringVar()
    twelveplex_3_mass_entry = StringVar()
    twelveplex_4_mass_entry = StringVar()
    twelveplex_5_mass_entry = StringVar()
    twelveplex_6_mass_entry = StringVar()
    twelveplex_7_mass_entry = StringVar()
    twelveplex_8_mass_entry = StringVar()
    twelveplex_9_mass_entry = StringVar()
    twelveplex_10_mass_entry = StringVar()
    twelveplex_11_mass_entry = StringVar()
    twelveplex_12_mass_entry = StringVar()
    
    twelveplex_1_name_entry.set('115a')
    twelveplex_2_name_entry.set('115b')
    twelveplex_3_name_entry.set('116a')
    twelveplex_4_name_entry.set('116b')
    twelveplex_5_name_entry.set('116c')
    twelveplex_6_name_entry.set('117a')
    twelveplex_7_name_entry.set('117b')
    twelveplex_8_name_entry.set('117c')
    twelveplex_9_name_entry.set('118a')
    twelveplex_10_name_entry.set('118b')
    twelveplex_11_name_entry.set('118c')
    twelveplex_12_name_entry.set('118d')
    
    twelveplex_1_mass_entry.set('115.12476')
    twelveplex_2_mass_entry.set('115.13108')
    twelveplex_3_mass_entry.set('116.12812')
    twelveplex_4_mass_entry.set('116.13444')
    twelveplex_5_mass_entry.set('116.14028')
    twelveplex_6_mass_entry.set('117.13147')
    twelveplex_7_mass_entry.set('117.13731')
    twelveplex_8_mass_entry.set('117.14363')
    twelveplex_9_mass_entry.set('118.13483')
    twelveplex_10_mass_entry.set('118.14067')
    twelveplex_11_mass_entry.set('118.14699')
    twelveplex_12_mass_entry.set('118.15283')
    
    canvas = Canvas(extract_window,bg = "#423C56",height = 800,width = 729,bd = 0,highlightthickness = 0,relief = "ridge")
        
    canvas.place(x = 0, y = 0)
    canvas.create_text(19.0,9.0,anchor="nw",text="Reporter Ion Extraction",fill="#FFFFFF",font=("Inter", 64 * -1))
    
    x=19
    y=90
    width= 700
    height = 550
    
    canvas.create_rectangle(x, y, x+width, y+height,fill="#D9D9D9",outline="")
    
    def eg_results_path():
        eg_results_path_csv = askopenfilename(filetypes=[("CSV Files",("*.csv"))]) 
        importdirectorypath.set(eg_results_path_csv)
    
    def eg_results_spectra_path():
        eg_results_path_txt = askopenfilename(filetypes=[("Text Files",("*.txt"))]) 
        importspectrapath.set(eg_results_path_txt)
        
    def export_folder():
        filename = filedialog.askdirectory()
        exportdirectorypath.set(filename)
    
    def begin_reporter_ion_extraction():
        tag_name_list = []
        tag_mass_list = []
        
        output_path = exportdirectorypath.get()
        results_path = importdirectorypath.get()
        spectra_path = importspectrapath.get()
        fragment_error_threshold = float(errorthreshold.get())
        
        mass_h = 1.00784
        
        tag_name_list.append(twelveplex_1_name_entry.get())
        tag_name_list.append(twelveplex_2_name_entry.get())
        tag_name_list.append(twelveplex_3_name_entry.get())
        tag_name_list.append(twelveplex_4_name_entry.get())
        tag_name_list.append(twelveplex_5_name_entry.get())
        tag_name_list.append(twelveplex_6_name_entry.get())
        tag_name_list.append(twelveplex_7_name_entry.get())
        tag_name_list.append(twelveplex_8_name_entry.get())
        tag_name_list.append(twelveplex_9_name_entry.get())
        tag_name_list.append(twelveplex_10_name_entry.get())
        tag_name_list.append(twelveplex_11_name_entry.get())
        tag_name_list.append(twelveplex_12_name_entry.get())
        ##Retrieve plex masses
        tag_mass_list.append(float(twelveplex_1_mass_entry.get()))
        tag_mass_list.append(float(twelveplex_2_mass_entry.get()))
        tag_mass_list.append(float(twelveplex_3_mass_entry.get()))
        tag_mass_list.append(float(twelveplex_4_mass_entry.get()))
        tag_mass_list.append(float(twelveplex_5_mass_entry.get()))
        tag_mass_list.append(float(twelveplex_6_mass_entry.get()))
        tag_mass_list.append(float(twelveplex_7_mass_entry.get()))
        tag_mass_list.append(float(twelveplex_8_mass_entry.get()))
        tag_mass_list.append(float(twelveplex_9_mass_entry.get()))
        tag_mass_list.append(float(twelveplex_10_mass_entry.get()))
        tag_mass_list.append(float(twelveplex_11_mass_entry.get()))
        tag_mass_list.append(float(twelveplex_12_mass_entry.get()))
        
        spectra = pd.read_csv(spectra_path, sep=",",skiprows=[0], names= ['fragment_mz','fragment_z','fragment_resolution','precursor_mz','ms2_scan',
                                                                          'precursor_z','precursor_RT','IonInjectTime','ms1_scan','precursor_intensity','null'])
    
        spectra['fragment_z'] = spectra['fragment_z'].replace(0, 1)
        spectra['fragment_monoisotopic_mass'] = (spectra['fragment_mz'] * spectra['fragment_z']) - (mass_h * spectra['fragment_z'])
    
        results = pd.read_csv(results_path)
        
        spectra_w_details = pd.DataFrame()
    
        peptide_name_log = []
        tag_name_log = []
        tag_intensity_log = []
        scan_log = []
        fragment_mz_log = []
    
        for y in tag_mass_list:
            y_monoisotopic = (y*1) - (mass_h*1)
            spectra[str(y) + ' error'] = ((abs(spectra['fragment_monoisotopic_mass'] - y_monoisotopic))/y_monoisotopic)*1E6
            spectra_w_details = spectra
    
        for a in range(0,len(results)):
            peptide_id = results['Peptide'].iloc[a]
            if '(12PlexDiLeu)' in peptide_id:
                scan_id = results['Scan'].iloc[a]
    
                spectra_filtered = spectra_w_details[spectra_w_details['ms2_scan'] == scan_id]
                
                for k in range(0,len(tag_name_list)):
                    tag_name_selected = tag_name_list[k]
                    tag_mass_selected = tag_mass_list[k]
                    
                    if( spectra_filtered[str(tag_mass_selected) + ' error'].min()) <= fragment_error_threshold:
                        spectra_filtered_tag = spectra_filtered[spectra_filtered[str(tag_mass_selected) + ' error'] <= fragment_error_threshold]
                        tag_intensity_log.append(spectra_filtered_tag['fragment_intensity'].max())
                        tag_name_log.append(tag_name_selected)
                        peptide_name_log.append(peptide_id)
                        scan_log.append(scan_id)
                        
                        filter_filter_df = spectra_filtered_tag[spectra_filtered_tag['fragment_intensity'] == (spectra_filtered_tag['fragment_intensity'].max())]
                        fragment_mz_log.append(filter_filter_df['fragment_mz'].iloc[0])
                        
                    else:
                        tag_intensity_log.append(0)
                        tag_name_log.append(tag_name_selected)
                        peptide_name_log.append(peptide_id)
                        scan_log.append(scan_id)
                        fragment_mz_log.append(0)
                
        report_ion_intensity_df = pd.DataFrame()
        report_ion_intensity_df['Peptide'] = peptide_name_log
        report_ion_intensity_df['Scan'] = scan_log
        report_ion_intensity_df['Tag'] = tag_name_log
        report_ion_intensity_df['Intensity'] = tag_intensity_log
        report_ion_intensity_df['Fragment_mz'] = fragment_mz_log
        pivot_df = report_ion_intensity_df.pivot_table(index=['Peptide', 'Scan'], columns='Tag', values='Intensity').reset_index()
        pivot_df.columns.name = None
        pivot_df.columns = ['Peptide', 'Scan'] + [f'Intensity_{tag}' for tag in pivot_df.columns[2:]]  
        output_path_rep = output_path + '\\reporter_ions_extracted.csv'
        with open(output_path_rep,'w',newline='') as filec:
                writerc = csv.writer(filec)
                pivot_df.to_csv(filec,index=False)       
        
        messagebox.showinfo("Process Complete", "Reporter ions have been extracted.")
        
    canvas.create_text(26.0,100.0,anchor="nw",text="EndoGenius Results Path: ",fill="#000000",font=("Inter", 16 * -1))
    eg_results_entry = Entry(canvas,bd=0,bg="#FFFFFF",highlightthickness=0,textvariable=importdirectorypath)
    eg_results_entry.place(x=274.0,y=100.0,width=340.0,height=28.0)
    eg_results_button_1 = Button(canvas,text='Browse',borderwidth=0,highlightthickness=0,relief="flat",command=eg_results_path)
    eg_results_button_1.place(x=625.0,y=100.0,width=77.21710205078125,height=30.0)
    
    canvas.create_text(110.0,150.0,anchor="nw",text="Spectra Path: ",fill="#000000",font=("Inter", 16 * -1))
    eg_spectra_entry = Entry(canvas,bd=0,bg="#FFFFFF",highlightthickness=0,textvariable=importspectrapath)
    eg_spectra_entry.place(x=274.0,y=150.0,width=340.0,height=28.0)
    eg_spectra_button_1 = Button(canvas,text='Browse',borderwidth=0,highlightthickness=0,relief="flat",command=eg_results_spectra_path)
    eg_spectra_button_1.place(x=625.0,y=150.0,width=77.21710205078125,height=30.0)
    
    canvas.create_text(115.0,205.0,anchor="nw",text="Export Directory: ",fill="#000000",font=("Inter", 16 * -1))
    eg_export_entry = Entry(canvas,bd=0,bg="#FFFFFF",highlightthickness=0,textvariable=exportdirectorypath)
    eg_export_entry.place(x=274.0,y=200.0,width=340.0,height=28.0)
    eg_export_button_1 = Button(canvas,text='Browse',borderwidth=0,highlightthickness=0,relief="flat",command=export_folder)
    eg_export_button_1.place(x=625.0,y=200.0,width=77.21710205078125,height=30.0)
    
    canvas.create_text(110.0,255.0,anchor="nw",text="Error tolerance (ppm): ",fill="#000000",font=("Inter", 16 * -1))
    error_entry = Entry(canvas,bd=0,bg="#FFFFFF",highlightthickness=0,textvariable=errorthreshold)
    error_entry.place(x=274.0,y=250.0,width=100.0,height=28.0)
    
    canvas.create_text(75.0,290.0,anchor="nw",text="Name",fill="#000000",font=("Inter", 16 * -1))
    canvas.create_text(215.0,290.0,anchor="nw",text="m/z",fill="#000000",font=("Inter", 16 * -1))
    
    canvas.create_text(30.0,314.0,anchor="nw",text="1: ",fill="#000000",font=("Inter", 16 * -1))
    entry115a_name = Entry(canvas,bd=0,bg="#FFFFFF",highlightthickness=0,textvariable=twelveplex_1_name_entry)
    entry115a_name.place(x=50.0,y=310.0,width=100.0,height=28.0)
    entry115a_mass = Entry(canvas,bd=0,bg="#FFFFFF",highlightthickness=0,textvariable=twelveplex_1_mass_entry)
    entry115a_mass.place(x=175.0,y=310.0,width=100.0,height=28.0)
    
    canvas.create_text(30.0,355.0,anchor="nw",text="2: ",fill="#000000",font=("Inter", 16 * -1))
    entry115b_name = Entry(canvas,bd=0,bg="#FFFFFF",highlightthickness=0,textvariable=twelveplex_2_name_entry)
    entry115b_name.place(x=50.0,y=350.0,width=100.0,height=28.0)
    entry115b_mass = Entry(canvas,bd=0,bg="#FFFFFF",highlightthickness=0,textvariable=twelveplex_2_mass_entry)
    entry115b_mass.place(x=175.0,y=350.0,width=100.0,height=28.0)
    
    canvas.create_text(30.0,393.0,anchor="nw",text="3: ",fill="#000000",font=("Inter", 16 * -1))
    entry116a_name = Entry(canvas,bd=0,bg="#FFFFFF",highlightthickness=0,textvariable=twelveplex_3_name_entry)
    entry116a_name.place(x=50.0,y=390.0,width=100.0,height=28.0)
    entry116a_mass = Entry(canvas,bd=0,bg="#FFFFFF",highlightthickness=0,textvariable=twelveplex_3_mass_entry)
    entry116a_mass.place(x=175.0,y=390.0,width=100.0,height=28.0)
    
    canvas.create_text(30.0,435.0,anchor="nw",text="4: ",fill="#000000",font=("Inter", 16 * -1))
    entry116b_name = Entry(canvas,bd=0,bg="#FFFFFF",highlightthickness=0,textvariable=twelveplex_4_name_entry)
    entry116b_name.place(x=50.0,y=430.0,width=100.0,height=28.0)
    entry116b_mass = Entry(canvas,bd=0,bg="#FFFFFF",highlightthickness=0,textvariable=twelveplex_4_mass_entry)
    entry116b_mass.place(x=175.0,y=430.0,width=100.0,height=28.0)
    
    canvas.create_text(30.0,475.0,anchor="nw",text="5: ",fill="#000000",font=("Inter", 16 * -1))
    entry116c_name = Entry(canvas,bd=0,bg="#FFFFFF",highlightthickness=0,textvariable=twelveplex_5_name_entry)
    entry116c_name.place(x=50.0,y=470.0,width=100.0,height=28.0)
    entry116c_mass = Entry(canvas,bd=0,bg="#FFFFFF",highlightthickness=0,textvariable=twelveplex_5_mass_entry)
    entry116c_mass.place(x=175.0,y=470.0,width=100.0,height=28.0)
    
    canvas.create_text(30.0,515.0,anchor="nw",text="6: ",fill="#000000",font=("Inter", 16 * -1))
    entry116d_name = Entry(canvas,bd=0,bg="#FFFFFF",highlightthickness=0,textvariable=twelveplex_6_name_entry)
    entry116d_name.place(x=50.0,y=510.0,width=100.0,height=28.0)
    entry116d_mass = Entry(canvas,bd=0,bg="#FFFFFF",highlightthickness=0,textvariable=twelveplex_6_mass_entry)
    entry116d_mass.place(x=175.0,y=510.0,width=100.0,height=28.0)
    
    canvas.create_text(400.0,290.0,anchor="nw",text="Name",fill="#000000",font=("Inter", 16 * -1))
    canvas.create_text(540.0,290.0,anchor="nw",text="m/z",fill="#000000",font=("Inter", 16 * -1))
    
    canvas.create_text(355.0,314.0,anchor="nw",text="7: ",fill="#000000",font=("Inter", 16 * -1))
    entry115a_name = Entry(canvas,bd=0,bg="#FFFFFF",highlightthickness=0,textvariable=twelveplex_7_name_entry)
    entry115a_name.place(x=375.0,y=310.0,width=100.0,height=28.0)
    entry115a_mass = Entry(canvas,bd=0,bg="#FFFFFF",highlightthickness=0,textvariable=twelveplex_7_mass_entry)
    entry115a_mass.place(x=500.0,y=310.0,width=100.0,height=28.0)
    
    canvas.create_text(355.0,355.0,anchor="nw",text="8: ",fill="#000000",font=("Inter", 16 * -1))
    entry115b_name = Entry(canvas,bd=0,bg="#FFFFFF",highlightthickness=0,textvariable=twelveplex_8_name_entry)
    entry115b_name.place(x=375.0,y=350.0,width=100.0,height=28.0)
    entry115b_mass = Entry(canvas,bd=0,bg="#FFFFFF",highlightthickness=0,textvariable=twelveplex_8_mass_entry)
    entry115b_mass.place(x=500.0,y=350.0,width=100.0,height=28.0)
    
    canvas.create_text(355.0,393.0,anchor="nw",text="9: ",fill="#000000",font=("Inter", 16 * -1))
    entry116a_name = Entry(canvas,bd=0,bg="#FFFFFF",highlightthickness=0,textvariable=twelveplex_9_name_entry)
    entry116a_name.place(x=375.0,y=390.0,width=100.0,height=28.0)
    entry116a_mass = Entry(canvas,bd=0,bg="#FFFFFF",highlightthickness=0,textvariable=twelveplex_9_mass_entry)
    entry116a_mass.place(x=500.0,y=390.0,width=100.0,height=28.0)
    
    canvas.create_text(347.0,435.0,anchor="nw",text="10: ",fill="#000000",font=("Inter", 16 * -1))
    entry116b_name = Entry(canvas,bd=0,bg="#FFFFFF",highlightthickness=0,textvariable=twelveplex_10_name_entry)
    entry116b_name.place(x=375.0,y=430.0,width=100.0,height=28.0)
    entry116b_mass = Entry(canvas,bd=0,bg="#FFFFFF",highlightthickness=0,textvariable=twelveplex_10_mass_entry)
    entry116b_mass.place(x=500.0,y=430.0,width=100.0,height=28.0)
    
    canvas.create_text(347.0,475.0,anchor="nw",text="11: ",fill="#000000",font=("Inter", 16 * -1))
    entry116c_name = Entry(canvas,bd=0,bg="#FFFFFF",highlightthickness=0,textvariable=twelveplex_11_name_entry)
    entry116c_name.place(x=375.0,y=470.0,width=100.0,height=28.0)
    entry116c_mass = Entry(canvas,bd=0,bg="#FFFFFF",highlightthickness=0,textvariable=twelveplex_11_mass_entry)
    entry116c_mass.place(x=500.0,y=470.0,width=100.0,height=28.0)
    
    canvas.create_text(347.0,515.0,anchor="nw",text="12: ",fill="#000000",font=("Inter", 16 * -1))
    entry116d_name = Entry(canvas,bd=0,bg="#FFFFFF",highlightthickness=0,textvariable=twelveplex_12_name_entry)
    entry116d_name.place(x=375.0,y=510.0,width=100.0,height=28.0)
    entry116d_mass = Entry(canvas,bd=0,bg="#FFFFFF",highlightthickness=0,textvariable=twelveplex_12_mass_entry)
    entry116d_mass.place(x=500.0,y=510.0,width=100.0,height=28.0)
    
    button_2 = Button(canvas,text='Begin Analysis',borderwidth=0,highlightthickness=0,relief="flat",command=begin_reporter_ion_extraction)
    button_2.place(x=300.0,y=575.0,width=90,height=30.0)
    
    extract_window.resizable(True, True)
    extract_window.mainloop()

def launch_motif_build_gui():
    OUTPUT_PATH = Path(__file__).parent
    ASSETS_PATH = OUTPUT_PATH / Path("./assets")

    def relative_to_assets(path: str) -> Path:
        return ASSETS_PATH / Path(path)

    motif_window = Toplevel(window)
    motif_window.geometry("770x540")
    motif_window.configure(bg = "#423C56")
    motif_window.attributes("-topmost", True)
    motif_window.title('MotifQuest')

    min_motif_len_in = StringVar()
    min_num_motif_inst = StringVar()
    part_motif_flank = StringVar()
    fasta_path_input = StringVar()
    t_val = StringVar()
    output_dir = StringVar()
    clustal_path = StringVar()
    def build_motif_db():

        from MotifQuest_code_v02 import start_building_a_motif_db
        in_file = fasta_path_input.get()
        output_folder_path = output_dir.get()
        min_motif_len_get = min_motif_len_in.get()
        min_motif_len_get = int(min_motif_len_get)
        t_value_get = t_val.get()
        t_value_get = int(t_value_get)
        t_value_format = []
        t_value_format.append(t_value_get)
        min_motif_inst_get = min_num_motif_inst.get()
        min_motif_inst_get = int(min_motif_inst_get)
        clustal_omega_path = clustal_path.get()
        start_building_a_motif_db(in_file, output_folder_path, t_value_format, min_motif_len_get, min_motif_inst_get,clustal_omega_path)
        messagebox.showinfo("Finished", "MotifQuest has finished")

    def browse_files_fasta():
        filename = filedialog.askopenfilename(filetypes=[("FASTA Files", "*.fasta")])
        fasta_path_input.set(filename)

    def browse_files_clustalo():
        filename = filedialog.askopenfilename(filetypes=[("Executable Files", "*.exe")])
        clustal_path.set(filename)

    def browse_files():
        filename = filedialog.askdirectory()
        output_dir.set(filename)

    motif_canvas = Canvas(motif_window, bg="#423C56", height=750, width=778, bd=0, highlightthickness=0, relief="ridge")
    motif_canvas.place(x=0, y=0)
    motif_canvas.create_rectangle(11.0, 101.0, 748.0, 517.0, fill="#D9D9D9", outline="")
    motif_canvas.create_text(17.0, 123.0, anchor="nw", text="Import FASTA Database", fill="#000000", font=("Inter", 16 * -1))
    motif_canvas.create_text(5.0, 0.0, anchor="nw", text="MotifQuest", fill="#FFFFFF", font=("Inter", 64 * -1))
    motif_entry_1 = Entry(motif_canvas, bd=0, bg="#FFFFFF", highlightthickness=0, textvariable=fasta_path_input)
    motif_entry_1.place(x=213.0, y=123.0, width=340.0, height=28.0)
    entry_2 = Entry(motif_canvas, bd=0, bg="#FFFFFF", highlightthickness=0, textvariable=min_motif_len_in)
    entry_2.place(x=213.0, y=209.0, width=340.0, height=28.0)
    entry_3 = Entry(motif_canvas, bd=0, bg="#FFFFFF", highlightthickness=0, textvariable=min_num_motif_inst)
    entry_3.place(x=213.0, y=259.0, width=200.0, height=28.0)
    entry_4 = Entry(motif_canvas, bd=0, bg="#FFFFFF", highlightthickness=0, textvariable=part_motif_flank)
    entry_4.place(x=213.0, y=308.0, width=340.0, height=28.0)
    entry_5 = Entry(motif_canvas, bd=0, bg="#FFFFFF", highlightthickness=0, textvariable=clustal_path)
    entry_5.place(x=213.0, y=400.0, width=340.0, height=28.0)
    button_1 = Button(motif_window, text='Browse', borderwidth=0, highlightthickness=0, command=lambda: browse_files_fasta(), relief="flat")
    button_1.place(x=575.0, y=123.0, width=78.21710205078125, height=30.0)
    motif_canvas.create_text(37.0, 360.0, anchor="nw", text="Export Directory:", fill="#000000", font=("Inter", 16 * -1))
    entry_7 = Entry(motif_canvas, bd=0, highlightthickness=0, textvariable=output_dir)
    entry_7.place(x=213.0, y=355.0, width=340.0, height=28.0)
    button_3 = Button(motif_window, text='Browse', borderwidth=0, highlightthickness=0, command=lambda: browse_files(), relief="flat")
    button_3.place(x=575.0, y=355.0, width=78.21710205078125, height=30.0)
    motif_canvas.create_text(33.0, 173.0, anchor="nw", text="T-Value range", fill="#000000", font=("Inter", 16 * -1))
    motif_canvas.create_text(21.0, 218.0, anchor="nw", text="Minimum Motif Length", fill="#000000", font=("Inter", 16 * -1))
    motif_canvas.create_text(15.0, 260.0, anchor="nw", text="Minimum Number of\nMotif Instances", fill="#000000", font=("Inter", 16 * -1))
    entry_8 = Entry(motif_canvas, bd=0, bg="#FFFFFF", highlightthickness=0, textvariable=t_val)
    entry_8.place(x=213.0, y=166.0, width=72.0, height=28.0)
    motif_canvas.create_text(18.0, 315.0, anchor="nw", text="Partial Motif Flank Size", fill="#000000", font=("Inter", 16 * -1))
    motif_canvas.create_text(18.0, 411.0, anchor="nw", text="Clustal Omega Path", fill="#000000", font=("Inter", 16 * -1))
    button_4 = Button(motif_window, text='Begin Analysis', borderwidth=0, highlightthickness=0, command=build_motif_db, relief="flat")
    button_4.place(x=250.0, y=450.0, width=141.0, height=30.0)
    button_5 = Button(motif_window, text='Browse', borderwidth=0, highlightthickness=0, command=lambda: browse_files_clustalo(), relief="flat")
    button_5.place(x=575.0, y=400.0, width=78.21710205078125, height=30.0)
    motif_window.resizable(False, False)
    motif_window.mainloop()

def launch_lib_build_gui():
    OUTPUT_PATH = Path(__file__).parent
    ASSETS_PATH = OUTPUT_PATH / Path("./assets")
        
    def relative_to_assets(path: str) -> Path:
        return ASSETS_PATH / Path(path)
    
    lib_window = Toplevel(window)
    lib_window.geometry("729x295")
    lib_window.configure(bg = "#423C56")
    lib_window.attributes("-topmost", True)

    eg_results_dir = StringVar()
    out_dir = StringVar()
    error = StringVar()

    def in_dir_path_get():
        in_dir_path_out = filedialog.askdirectory() 
        eg_results_dir.set(in_dir_path_out)
        
    def out_dir_path_get():
        out_dir_path_out = filedialog.askdirectory() 
        out_dir.set(out_dir_path_out)
    
    def launch_library_process():

        eg_results_dir_get = eg_results_dir.get()
        out_dir_get = out_dir.get()
        error_get = float(error.get())
        
        from sl_builder_driver import build_a_SL
        
        build_a_SL(eg_results_dir_get,out_dir_get,error_get)
        
        messagebox.showinfo("Process Complete", "The library has been built.")

    canvas = Canvas(
        lib_window,
        bg = "#423C56",
        height = 295,
        width = 729,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
    )
    
    canvas.place(x = 0, y = 0)
    canvas.create_text(
        19.0,
        9.0,
        anchor="nw",
        text="Library Builder",
        fill="#FFFFFF",
        font=("Inter", 64 * -1)
    )
    
    canvas.create_rectangle(
        19.0,
        90.0,
        709.0,
        271.0,
        fill="#D9D9D9",
        outline="")
    
    canvas.create_text(
        26.0,
        106.0,
        anchor="nw",
        text="EndoGenius Results Directory",
        fill="#000000",
        font=("Inter", 16 * -1)
    )
    
    
    entry_1 = Entry(
        canvas,
        bd=0,
        bg="#FFFFFF",
        highlightthickness=0,
        textvariable = eg_results_dir
    )
    entry_1.place(
        x=274.0,
        y=106.0,
        width=340.0,
        height=28.0
    )
    
    button_image_1 = PhotoImage(
        file=relative_to_assets("lib_button_1.png"))
    button_1 = Button(
        canvas,
        text='Browse',
        borderwidth=0,
        highlightthickness=0,
        command=in_dir_path_get,
        relief="flat"
    )
    button_1.place(
        x=625.0,
        y=106.0,
        width=77.21710205078125,
        height=30.0
    )
    
    canvas.create_text(
        26.0,
        182.0,
        anchor="nw",
        text="Output Directory",
        fill="#000000",
        font=("Inter", 16 * -1)
    )
    
    
    entry_2 = Entry(
        canvas,
        bd=0,
        bg="#FFFFFF",
        highlightthickness=0,
        textvariable = out_dir
    )
    entry_2.place(
        x=274.0,
        y=182.0,
        width=340.0,
        height=28.0
    )
    
    canvas.create_text(
        26.0,
        144.0,
        anchor="nw",
        text="Fragment error threshold (Da)",
        fill="#000000",
        font=("Inter", 16 * -1)
    )
    
    
    entry_3 = Entry(
        lib_window,
        bd=0,
        bg="#FFFFFF",
        highlightthickness=0,
        textvariable = error
    )
    entry_3.place(
        x=274.0,
        y=144.0,
        width=69.0,
        height=28.0
    )

    button_2 = Button(
        canvas,
        text='Browse',
        borderwidth=0,
        highlightthickness=0,
        command=out_dir_path_get,
        relief="flat"
    )
    button_2.place(
        x=625.0,
        y=182.0,
        width=77.21710205078125,
        height=30.0
    )
    
    button_3 = Button(
        canvas,
        borderwidth=0,
        highlightthickness=0,
        text = 'Build Library',
        command=launch_library_process,
        relief="flat"
    )
    button_3.place(
        x=303.0,
        y=228.0,
        width=141.0,
        height=30.0
    )
    lib_window.resizable(True, True)
    lib_window.mainloop()

def launch_diann():
    try:
        subprocess.Popen([r'DIA-NN\1.8.1\DIA-NN.exe'])  # Replace with the actual command to launch DIA-NN
        messagebox.showinfo("Launch", "DIA-NN GUI is launching...")
    except Exception as e:
        messagebox.showerror("Error", f"Failed to launch DIA-NN: {e}")

def launch_quant():

    quant_window = Toplevel(window)

    quant_window.geometry("760x530")
    quant_window.title('Quantification App')


    quant_menubar = Menu(quant_window)
    quant_filemenu = Menu(quant_menubar, tearoff=0)
    quant_filemenu.add_command(label="Exit", command=quant_window.quit)
    quant_menubar.add_cascade(label="File", menu=quant_filemenu)
    quant_window.configure(bg = "#423C56",menu=quant_menubar)
    quant_output_dir = StringVar()
    quant_input_file_path = StringVar()
    quant_input_sample_name = StringVar()

    def quantify_summary_begin():
        
        quant_output_directory = quant_output_dir.get()

        quant_file_paths = list(quant_entry_4.get(0,END))

        quant_file_names = list(quant_entry_5.get(0,END))

        quant_merge_df = pd.DataFrame()

        if len(quant_file_paths) != len(quant_file_names):
            raise Exception("A file name must be selected for each file input")
            
        else:
            for a in range(0,(len(quant_file_paths))):
                quant_single_file_path = quant_file_paths[a]
                quant_single_name = quant_file_names[a]
                
                quant_single_file = pd.read_csv(quant_single_file_path)
                quant_single_file_filtered = pd.DataFrame()
                quant_single_file_filtered['Peptide'] = quant_single_file['Peptide']
                quant_single_file_filtered[(quant_single_name + ' Intensity')] = quant_single_file['precursor_intensity']
                
                quant_single_file_filtered = quant_single_file_filtered.sort_values(by=(quant_single_name + ' Intensity'),ascending=False)
                quant_single_file_filtered = quant_single_file_filtered.drop_duplicates(subset='Peptide')

                if len(quant_merge_df)==0:
                    quant_merge_df = quant_single_file_filtered
                else:
                    quant_merge_df = pd.merge(quant_merge_df, quant_single_file_filtered, on='Peptide', how='outer')

        quant_file_out_path = quant_output_directory + '\\merged_intensities.csv'
        with open(quant_file_out_path,'w',newline='') as filec:
                writerc = csv.writer(filec)
                quant_merge_df.to_csv(filec,index=False)
        pymsgbox.alert('Your quantification report is complete','Status Update')

    def quant_output_path_get():
        quant_path_out = filedialog.askdirectory() 
        quant_output_dir.set(quant_path_out)

    def quant_input_file_path_get():
        quant_path_input_file = askopenfilename(filetypes=[("CSV Files",("*.csv"))]) 
        quant_input_file_path.set(quant_path_input_file)

    def quant_add_file():
            quant_var=quant_input_file_path.get()
            quant_entry_4.insert('end',quant_var)
            quant_entry_1.delete(0,'end')

    def quant_delete_file():
            quant_entry_4.delete(quant_entry_4.curselection())

    def quant_add_name():
            quant_var=quant_input_sample_name.get()
            quant_entry_5.insert('end',quant_var)
            quant_entry_3.delete(0,'end')

    def quant_delete_sample_name():
            quant_entry_5.delete(quant_entry_5.curselection())

    quant_canvas = Canvas(quant_window, bg="#423C56", height=883, width=778, bd=0, highlightthickness=0, relief="ridge")
    quant_canvas.place(x=0, y=0)
    quant_canvas.create_rectangle(10.0, 109.0, 747.0, 525.0, fill="#D9D9D9", outline="")
    quant_canvas.create_text(15.0, 128.0, anchor="nw", text="Import Results:", fill="#000000", font=("Inter", 16 * -1))
    quant_canvas.create_text(5.0, 0.0, anchor="nw", text="Quantify Results", fill="#FFFFFF", font=("Inter", 64 * -1))
    quant_entry_1 = Entry(quant_canvas, bd=0, bg="#FFFFFF", highlightthickness=0, textvariable=quant_input_file_path)
    quant_entry_1.place(x=131.0, y=123.0, width=340.0, height=28.0)
    quant_button_image_1 = PhotoImage(file=relative_to_assets("quant_button_1.png"))
    quant_button_1 = Button(quant_canvas, image=quant_button_image_1, borderwidth=0, highlightthickness=0, command=quant_input_file_path_get, relief="flat")
    quant_button_1.place(x=480.0, y=123.0, width=78.21710205078125, height=30.0)
    
    quant_canvas.create_text(11.0, 452.0, anchor="nw", text="Export Directory:", fill="#000000", font=("Inter", 16 * -1))
    quant_entry_2 = Entry(quant_canvas, bd=0, bg="#FFFFFF", highlightthickness=0, textvariable=quant_output_dir)
    quant_entry_2.place(x=153.0, y=447.0, width=340.0, height=28.0)
    quant_button_image_2 = PhotoImage(file=relative_to_assets("quant_button_2.png"))
    quant_button_2 = Button(quant_canvas, image=quant_button_image_2, borderwidth=0, highlightthickness=0, command=quant_output_path_get, relief="flat")
    quant_button_2.place(x=502.0, y=447.0, width=78.21710205078125, height=30.0)
    
    quant_canvas.create_text(15.0, 168.0, anchor="nw", text="Sample Name:", fill="#000000", font=("Inter", 16 * -1))
    quant_canvas.create_text(14.0, 200.0, anchor="nw", text="File List:", fill="#000000", font=("Inter", 16 * -1))
    quant_entry_3 = Entry(quant_canvas, bd=0, bg="#FFFFFF", highlightthickness=0, textvariable=quant_input_sample_name)
    quant_entry_3.place(x=131.0, y=163.0, width=340.0, height=28.0)
    quant_entry_4 = Listbox(quant_canvas, width=50)
    quant_entry_4.place(x=17.0, y=225.0, width=340.0, height=144.0)
    quant_canvas.create_text(352.0, 200.0, anchor="nw", text="Name List:", fill="#000000", font=("Inter", 16 * -1))
    quant_entry_5 = Listbox(quant_canvas, width=50)
    quant_entry_5.place(x=372.0, y=225.0, width=340.0, height=144.0)
    
    quant_button_image_3 = PhotoImage(file=relative_to_assets("quant_button_3.png"))
    quant_button_3 = Button(quant_canvas, image=quant_button_image_3, borderwidth=0, highlightthickness=0, command=quant_add_name, relief="flat")
    quant_button_3.place(x=480.0, y=162.0, width=109.44155883789062, height=31.0)
    
    quant_button_image_4 = PhotoImage(file=relative_to_assets("quant_button_4.png"))
    quant_button_4 = Button(quant_canvas, image=quant_button_image_4, borderwidth=0, highlightthickness=0, command=quant_add_file, relief="flat")
    quant_button_4.place(x=558.0, y=123.0, width=77.21710205078125, height=30.0)
    
    quant_button_image_5 = PhotoImage(file=relative_to_assets("quant_button_5.png"))
    quant_button_5 = Button(quant_canvas, image=quant_button_image_5, borderwidth=0, highlightthickness=0, command=quant_delete_file, relief="flat")
    quant_button_5.place(x=131.0, y=381.0, width=100.0, height=30.0)
    
    quant_button_image_6 = PhotoImage(file=relative_to_assets("quant_button_6.png"))
    quant_button_6 = Button(quant_canvas, image=quant_button_image_6, borderwidth=0, highlightthickness=0, command=quant_delete_sample_name, relief="flat")
    quant_button_6.place(x=503.0, y=381.0, width=100.0, height=30.0)
    
    quant_button_image_7 = PhotoImage(file=relative_to_assets("quant_button_7.png"))
    quant_button_7 = Button(quant_canvas, image=quant_button_image_7, borderwidth=0, highlightthickness=0, command=quantify_summary_begin, relief="flat")
    quant_button_7.place(x=319.0, y=487.0, width=141.0, height=30.0)
    
    quant_canvas.create_rectangle(638.0, 828.0, 738.0, 928.0, fill="#000000", outline="")
    
    quant_window.resizable(False, False)
    quant_window.mainloop()


def openweb_liweb():
    new = 1
    url = "https://www.lilabs.org/resources"
    webbrowser.open(url,new=new)

def openweb_git():
    new = 1
    url = "https://github.com/lingjunli-research"
    webbrowser.open(url,new=new)

def openweb_user_manual():
    new = 1
    url = "https://docs.google.com/document/d/e/2PACX-1vRwKSjIl6wu88MTObZ7G0QYl9wzg7Rm065o4AxM1zzAMspEfHChLMcHMmWFWD8BjLIKSsvsqONeHknb/pub"
    webbrowser.open(url,new=new)

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def raw_MS2_path():
    path_MS2 = askopenfilename(filetypes=[(".MS2 Files",("*.MS2"))]) 
    input_path_MS2.set(path_MS2)

def formatted_MS2_path():
    path_format_MS2 = askopenfilename(filetypes=[("Text Files",("*.txt"))]) 
    input_path_format_MS2.set(path_format_MS2)
    
def prebuilt_db_path():
    path_prebuilt_db = askopenfilename(filetypes=[("CSV Files",("*.csv"))]) 
    database_csv_path.set(path_prebuilt_db)
    
def target_list_path_get():
    path_target_list = askopenfilename(filetypes=[("CSV Files",("*.csv"))]) 
    target_peptide_list_path.set(path_target_list)

def fasta_db_get():
    path_fasta = askopenfilename(filetypes=[("FASTA Files",("*.fasta"))]) 
    fasta_path.set(path_fasta)
    
def motif_db_get():
    path_motif_db = askopenfilename(filetypes=[("CSV Files",("*.csv"))]) 
    motif_db_path.set(path_motif_db)
    
def output_path_get():
    path_out = filedialog.askdirectory() 
    output_dir_path.set(path_out)

def make_target_list():
    fasta_path_get = fasta_path.get()
    output_folder = output_dir_path.get()
    
    fasta_to_df = []

    with open(fasta_path_get) as fasta_file:  # Will close handle cleanly
        for title, sequence in SimpleFastaParser(fasta_file):
            fasta_to_df.append(sequence)
            
    target_list = pd.DataFrame()
    target_list['Sequence'] = fasta_to_df

    file_path = output_folder + '\\target_list.csv'
    with open(file_path,'w',newline='') as filec:
            writerc = csv.writer(filec)
            target_list.to_csv(filec,index=False)
    return file_path

def make_db():
    fasta_path_get = fasta_path.get()
    output_folder = output_dir_path.get()
    
    variable_mod_dict = {}
    
    amid_var_val = amid_var.get()
    ox_var_val = ox_var.get()
    pgE_var_val = pgE_var.get()
    sulf_var_val = sulf_var.get()
    pgQ_var_val = pgQ_var.get()
    dileu_var_val = DiLeu.get()
    dileu_Cterm_var_val = DiLeu_Nterm.get()
    s_phospho_var_val = s_phospho_var.get()
    
    if amid_var_val == 0:
        pass
    elif amid_var_val == 1:
        variable_mod_dict['-Amidated'] = True
        
    if ox_var_val == 0:
        pass
    elif ox_var_val == 1:
        variable_mod_dict['(Oxidation)'] = ['M']
        
    if pgE_var_val == 0:
        pass
    elif pgE_var_val == 1:
        variable_mod_dict['(Pyro-glu)'] = ['ntermE']
    
    if pgQ_var_val == 0:
        pass
    elif pgQ_var_val == 1:
        variable_mod_dict['(Pyro-glu)'] = ['ntermQ']
        
    if sulf_var_val == 0:
        pass
    elif sulf_var_val == 1:
        variable_mod_dict['(Sulfo)'] = ['Y']
    
    if s_phospho_var_val == 0:
        pass
    elif s_phospho_var_val == 1:
        variable_mod_dict['(Phospho)'] = ['S']
        
    if dileu_var_val == 0:
        pass
    elif dileu_var_val == 1:
        variable_mod_dict['(12PlexDiLeu)'] = ['K']
        
    if dileu_Cterm_var_val == 0:
        pass
    elif dileu_Cterm_var_val == 1:
        variable_mod_dict['12PlexDiLeu-'] = True
    
    from db_generator import make_a_DB
    max_mods_number = int(max_mods_pep.get())
    database_generated = make_a_DB(variable_mod_dict,fasta_path_get,output_folder,max_mods_number)
    return database_generated
    

def checked_clear_begin_search(predefined_db_path,output_parent_directory,raw_file_formatted_path,target_path):
    from database_search import raw_file_detail_extraction
    from database_search import launch_db_search_pt1
    from PSM_assignment import PSM_assignment_execute
    from motif_search import start_motif_search
    from results_metric_extract import results_metric_extract_start
    from metric_handling import metric_handling_apply
    from target_decoy_assess import target_decoy_apply
    from EndoGenius_Score_Apply import endogenius_apply
    
    details = raw_file_detail_extraction(raw_file_formatted_path,output_parent_directory)
    sample_name = details[0]
    sample_output_directory = details[1]

    precursor_error_cutoff = float(precursor_err.get())
    fragment_error_cutoff = float(fragment_err.get())
    min_mz = float(mz_range_min.get())
    min_intensity_pass = int(min_intensity.get())
    standard_err_percent = float(standard_err.get())
    
    amidation = amid_var.get()

    oxidation_M_status = ox_var.get()

    pyroglu_E_status = pgE_var.get()

    pyroglu_Q_status = pgQ_var.get()

    sulfo_Y_status = sulf_var.get()
    
    dileu_K_status = DiLeu.get()
    
    phospho_S_status = s_phospho_var.get()

    max_modifications = int(max_mods_pep.get())
    
    if len(input_path_format_MS2.get()) > 0:
        choose_mzml_directory = input_path_format_MS2.get()

    else:
        choose_mzml_directory = input_path_MS2.get()

    first_pass_db = launch_db_search_pt1(predefined_db_path,output_parent_directory,choose_mzml_directory,raw_file_formatted_path,precursor_error_cutoff,
                             fragment_error_cutoff,min_mz,min_intensity_pass,standard_err_percent,amidation,oxidation_M_status,
                             pyroglu_E_status,pyroglu_Q_status,sulfo_Y_status,dileu_K_status,phospho_S_status,max_modifications,sample_output_directory)
    print('First pass DB complete')
    confident_seq_cov = float(confident_coverage_threshold.get())
    max_adjacent_swapped_AA_get = int(max_adjacent_swapped_AAs.get())
    min_motif_len_get = int(min_motif_len.get())
    num_sub_AAs = int(max_swapped_AA.get())
    
    motif_path = motif_db_path.get()

    first_pass_PSM_assign = PSM_assignment_execute(standard_err_percent,confident_seq_cov,max_adjacent_swapped_AA_get,min_motif_len_get,
                                                   fragment_error_cutoff,num_sub_AAs,output_parent_directory,target_path,motif_path,sample_output_directory)
    print('First pass PSM assign complete')
    first_pass_motif_search = start_motif_search(output_parent_directory,motif_path,sample_output_directory)
    print('First pass motif search complete')
    first_pass_weighting_extract = results_metric_extract_start(output_parent_directory,output_parent_directory,sample_output_directory)
    print('First pass weighting extract complete')
    first_pass_metric_apply = metric_handling_apply(first_pass_weighting_extract,output_parent_directory,sample_output_directory)
    print('First pass metric apply complete')
    fdr_cutoff = str(FDR_threshold.get())
    eg_cutoff = str(eg_threshold.get())
    
    if len(fdr_cutoff)>0 and len(eg_cutoff)>0:
        messagebox.showerror('Input Error', 'Must input either an FDR cutoff \n or EndoGenius Score Cutoff\n not both')
    
    if len(fdr_cutoff)>0:
        fdr_cutoff_float = float(FDR_threshold.get())
        first_pass_TD = target_decoy_apply(first_pass_metric_apply,target_path,output_parent_directory,fdr_cutoff_float,sample_output_directory,raw_file_formatted_path)
    elif len(eg_cutoff)>0:
        eg_cutoff_float = float(eg_threshold.get())
        first_pass_TD = endogenius_apply(first_pass_metric_apply,target_path,output_parent_directory,eg_cutoff_float,sample_output_directory,raw_file_formatted_path)
    else:
        messagebox.showerror('Input Error', 'Must input either an FDR cutoff \n or EndoGenius Score Cutoff')
    print('First pass target-decoy complete')


def begin_search_confirmed():
    predefined_db_path = database_csv_path.get()
    if len(database_csv_path.get()) > 0:
        if len(target_peptide_list_path.get()) == 0:
            messagebox.showerror('Input Error', 'Target list not specified')
        if len(target_peptide_list_path.get()) > 0:
            if len(input_path_format_MS2.get()) > 0:
                predefined_db_path = database_csv_path.get()
                output_parent_directory = output_dir_path.get()
                raw_file_formatted_path = input_path_format_MS2.get()
                target_path = target_peptide_list_path.get()
                checked_clear_begin_search(predefined_db_path,output_parent_directory,raw_file_formatted_path,target_path)
                pymsgbox.alert('Your database search is complete','Status Update')
            elif len(input_path_format_MS2.get()) == 0:
                if len(input_path_MS2.get()) == 0:
                    messagebox.showerror('Input Error', 'No spectra file indicated')
                if len(input_path_MS2.get()) > 0:
                    from format_MS2_file_RT_IIT import format_raw_MS2
                    unformatted_spectra_path = input_path_MS2.get()
                    output_parent_directory = output_dir_path.get()
                    raw_file_formatted_path = format_raw_MS2(unformatted_spectra_path,output_parent_directory)
                    predefined_db_path = database_csv_path.get()
                    target_path = target_peptide_list_path.get()
                    checked_clear_begin_search(predefined_db_path,output_parent_directory,raw_file_formatted_path,target_path)
                    pymsgbox.alert('Your database search is complete','Status Update')
                
    if len(database_csv_path.get()) == 0:
        new_db_path = make_db()
    
        if len(input_path_format_MS2.get()) > 0:
            output_parent_directory = output_dir_path.get()
            raw_file_formatted_path = input_path_format_MS2.get()
            target_path = make_target_list()
            checked_clear_begin_search(new_db_path,output_parent_directory,raw_file_formatted_path,target_path)
            pymsgbox.alert('Your database search is complete','Status Update')
        if len(input_path_format_MS2.get()) == 0:
            from format_MS2_file_RT_IIT import format_raw_MS2
            unformatted_spectra_path = input_path_MS2.get()
            output_parent_directory = output_dir_path.get()
            raw_file_formatted_path = format_raw_MS2(unformatted_spectra_path,output_parent_directory)
            target_path = make_target_list()
            checked_clear_begin_search(new_db_path,output_parent_directory,raw_file_formatted_path,target_path)
            pymsgbox.alert('Your database search is complete','Status Update')

def begin_search():

    mz_min_check = mz_range_min.get()
    mz_max_check= mz_range_max.get()
    intensity_check= min_intensity.get()
    precz_check= max_precursor_z.get()
    fragz_check= max_fragment_z.get()
    prec_err_check= precursor_err.get()
    frag_err_check= fragment_err.get()
    maxmods_check= max_mods_pep.get()
    motifDB_check= motif_db_path.get()
    cov_check= confident_coverage_threshold.get()
    output_directory_check= output_dir_path.get()
    rawMS2_check= input_path_MS2.get()
    formatMS2_check= input_path_format_MS2.get()
    fasta_check= fasta_path.get()
    formatDB_check= database_csv_path.get()
    fdr_check= FDR_threshold.get()
    eg_check= eg_threshold.get()

    if len(mz_min_check)==0:
        messagebox.showerror('Input Error', 'Input minimum m/z value')
    if len(mz_min_check)>0:
        if len(mz_max_check)==0:
            messagebox.showerror('Input Error', 'Input maximum m/z value')
        elif len(mz_max_check)>0:
            if len(intensity_check)==0:
                messagebox.showerror('Input Error', 'Input minimum intensity value')
            elif len(intensity_check)>0:
                if len(precz_check)==0:
                    messagebox.showerror('Input Error', 'Input maximum precursor charge value')
                elif len(precz_check)>0:
                    if len(fragz_check)==0:
                        messagebox.showerror('Input Error', 'Input maximum fragment charge value')
                    elif len(fragz_check)>0:
                        if len(prec_err_check)==0:
                            messagebox.showerror('Input Error', 'Input maximum precursor error value')
                        elif len(prec_err_check)>0:
                            if len(frag_err_check)==0:
                                messagebox.showerror('Input Error', 'Input maximum fragment error value')
                            elif len(frag_err_check)>0:
                                if len(maxmods_check)==0:
                                    messagebox.showerror('Input Error', 'Input maximum # modifications per peptide\n\nIf no modifications selected, input 0')
                                elif len(maxmods_check)>0:
                                    if len(motifDB_check)==0:
                                        messagebox.showerror('Input Error', 'Select motif database')
                                    elif len(motifDB_check)>0:
                                        if len(cov_check)==0:
                                            messagebox.showerror('Input Error', 'Input confidence coverage threshold')
                                        elif len(cov_check)>0:
                                            if len(output_directory_check)==0:
                                                messagebox.showerror('Input Error', 'Select output folder')
                                            elif len(output_directory_check)>0:
                                                if len(rawMS2_check)==0 and len(formatMS2_check)==0:
                                                    messagebox.showerror('Input Error', 'Input spectral file')
                                                elif len(rawMS2_check)>0 and len(formatMS2_check)>0:
                                                    messagebox.showerror('Input Error', 'Input either raw or formatted spectral file, not both')
                                                elif (len(rawMS2_check)>0 and len(formatMS2_check)==0) or (len(rawMS2_check)==0 and len(formatMS2_check)>0):
                                                        if len(fasta_check)==0 and len(formatDB_check)==0:
                                                            messagebox.showerror('Input Error', 'Input database file')
                                                        elif len(fasta_check)>0 and len(formatDB_check)>0:
                                                            messagebox.showerror('Input Error', 'Input either raw .fasta file or formatted .csv database file, not both')
                                                        elif (len(fasta_check)>0 and len(formatDB_check)==0) or (len(fasta_check)==0 and len(formatDB_check)>0):
                                                                if len(rawMS2_check)>0:
                                                                    if '_formatted.ms2' in rawMS2_check:
                                                                        mzml_path_check = rawMS2_check.replace('_formatted.ms2','.mzML')
                                                                    elif '_formatted.txt' in rawMS2_check:
                                                                        mzml_path_check = rawMS2_check.replace('_formatted.txt','.mzML')
                                                                    elif '.txt' in rawMS2_check:
                                                                        mzml_path_check = rawMS2_check.replace('.txt','.mzML')
                                                                    elif '.ms2' in rawMS2_check:
                                                                        mzml_path_check = rawMS2_check.replace('.ms2','.mzML')
                                                                    else:
                                                                        messagebox.showerror('Input Error', 'Corresponding .mzML file does not exist')
                                                                    
                                                                    mzml_path_valid_check = os.path.isfile(mzml_path_check)
                                                                    if mzml_path_valid_check == False:
                                                                        messagebox.showerror('Input Error', 'Corresponding .mzML file does not exist')
                                                                    if mzml_path_valid_check == True:
                                                                        if len(fdr_check)==0 and len(eg_check)==0:
                                                                            messagebox.showerror('Input Error', 'Input either FDR threshold or EndoGenius score threshold')
                                                                        elif len(fdr_check)>0 and len(eg_check)>0:
                                                                            messagebox.showerror('Input Error', 'Input either FDR cutoff or EndoGenius score cutoff, not both')
                                                                        elif(len(fdr_check)>0 and len(eg_check)==0) or (len(fdr_check)==0 and len(eg_check)>0): 
                                                                                if len(database_csv_path.get()) > 0:
                                                                                    if len(target_peptide_list_path.get()) == 0:
                                                                                        messagebox.showerror('Input Error', 'Target list not specified')
                                                                                    else:
                                                                                        begin_search_confirmed()
                                                                                else:
                                                                                    begin_search_confirmed()
                                                                elif len(formatMS2_check)>0:
                                                                    if '_formatted.ms2' in formatMS2_check:
                                                                        mzml_path_check = formatMS2_check.replace('_formatted.ms2','.mzML')
                                                                    elif '_formatted.txt' in formatMS2_check:
                                                                        mzml_path_check = formatMS2_check.replace('_formatted.txt','.mzML')
                                                                    elif '.txt' in formatMS2_check:
                                                                        mzml_path_check = formatMS2_check.replace('.txt','.mzML')
                                                                    elif '.ms2' in formatMS2_check:
                                                                        mzml_path_check = formatMS2_check.replace('.ms2','.mzML')
                                                                    else:
                                                                        messagebox.showerror('Input Error', 'Corresponding .mzML file does not exist')
                                                                    
                                                                    mzml_path_valid_check = os.path.isfile(mzml_path_check)
                                                                    if mzml_path_valid_check == False:
                                                                        messagebox.showerror('Input Error', 'Corresponding .mzML file does not exist')
                                                                    if mzml_path_valid_check == True:
                                                                        if len(fdr_check)==0 and len(eg_check)==0:
                                                                            messagebox.showerror('Input Error', 'Input either FDR threshold or EndoGenius score threshold')
                                                                        elif len(fdr_check)>0 and len(eg_check)>0:
                                                                            messagebox.showerror('Input Error', 'Input either FDR cutoff or EndoGenius score cutoff, not both')
                                                                        elif(len(fdr_check)>0 and len(eg_check)==0) or (len(fdr_check)==0 and len(eg_check)>0):
                                                                                if len(database_csv_path.get()) > 0:
                                                                                    if len(target_peptide_list_path.get()) == 0:
                                                                                        messagebox.showerror('Input Error', 'Target list not specified')
                                                                                    else:
                                                                                        begin_search_confirmed()
                                                                                else:
                                                                                    begin_search_confirmed()
                                                                                    
    

menubar = Menu(window)
filemenu = Menu(menubar, tearoff=0)

filemenu.add_command(label="Exit", command=window.quit)
menubar.add_cascade(label="File", menu=filemenu)

helpmenu = Menu(menubar, tearoff=0)
helpmenu.add_command(label="Li Lab Website", command=openweb_liweb)
helpmenu.add_command(label="Li Lab GitHub", command=openweb_git)
helpmenu.add_command(label="User manual", command=openweb_user_manual)
menubar.add_cascade(label="Help", menu=helpmenu)

toolmenu = Menu(menubar, tearoff=0)
toolmenu.add_command(label="Quantiation Report", command = launch_quant)
toolmenu.add_command(label="Build Spectral Library", command = launch_lib_build_gui)
toolmenu.add_command(label="Launch DIA-NN GUI", command=launch_diann)
toolmenu.add_command(label="Launch MotifQuest", command=launch_motif_build_gui)
toolmenu.add_command(label="Extract Reporter Ions", command=reporter_ion_extraction_begin)
menubar.add_cascade(label="Tools", menu=toolmenu)

window.config(menu=menubar)

canvas = Canvas(window,bg = "#423C56",height = 883,width = 778,bd = 0,highlightthickness = 0,relief = "ridge")
canvas.place(x = 0, y = 0)
canvas.create_rectangle(10.0,200.0,773.0,257.0,fill="#D9D9D9",outline="")
canvas.create_text(20.0,216.0,anchor="nw",text="m/z range",fill="#000000",font=("Inter", 16 * -1))
canvas.create_text(171.0,219.0,anchor="nw",text="-",fill="#000000",font=("Inter", 16 * -1))
canvas.create_text(270.0,210.0,anchor="nw",text="minimum\nintensity",fill="#000000",font=("Inter", 16 * -1),justify='center')
canvas.create_text(420.0,210.0,anchor="nw",text="max precursor\ncharge",fill="#000000",font=("Inter", 16 * -1),justify='center')
canvas.create_text(600.0,210.0,anchor="nw",text="max fragment\ncharge",fill="#000000",font=("Inter", 16 * -1),justify='center')
canvas.create_text(5.0, 166.0, anchor="nw", text="2. Spectral processing", fill="#FFFFFF", font=("Inter", 24 * -1))
canvas.create_text(5.0, 76.0, anchor="nw", text="1. Spectral input", fill="#FFFFFF", font=("Inter", 24 * -1))
canvas.create_rectangle(10.0, 109.0, 369.0, 166.0, fill="#D9D9D9", outline="")
canvas.create_text(32.0, 128.0, anchor="nw", text="Raw .MS2", fill="#000000", font=("Inter", 16 * -1))
canvas.create_rectangle(411.0, 109.0, 770.0, 166.0, fill="#D9D9D9", outline="")
entry_1 = Entry(bd=0, bg="#FFFFFF", highlightthickness=0, textvariable=input_path_format_MS2)
entry_1.place(x=527.0, y=123.0, width=146.0, height=28.0)
canvas.create_text(440.0, 119.0, anchor="nw", text="Formatted\nRaw .MS2", fill="#000000", font=("Inter", 16 * -1), justify='center')
canvas.create_text(332.0, 125.0, anchor="nw", text="or", fill="#FFFFFF", font=("Inter", 16 * -1))
canvas.create_text(5.0, 582.0, anchor="nw", text="5. PSM assignment", fill="#FFFFFF", font=("Inter", 24 * -1))
canvas.create_rectangle(10.0, 613.0, 770.0, 715.0, fill="#D9D9D9", outline="")
canvas.create_text(14.0, 626.0, anchor="nw", text="Motif database", fill="#000000", font=("Inter", 16 * -1))
canvas.create_text(425.0, 626.0, anchor="nw", text="Confident coverage threshold (%)", fill="#000000", font=("Inter", 16 * -1))
canvas.create_text(5.0, 720.0, anchor="nw", text="6. Export results", fill="#FFFFFF", font=("Inter", 24 * -1))
canvas.create_rectangle(10.0, 749.0, 411.0, 808.0, fill="#D9D9D9", outline="")
canvas.create_text(29.0, 769.0, anchor="nw", text="Output directory", fill="#000000", font=("Inter", 16 * -1))
canvas.create_text(5.0, 265.0, anchor="nw", text="3. Database definition", fill="#FFFFFF", font=("Inter", 24 * -1))
canvas.create_rectangle(10.0, 315.0, 369.0, 436.0, fill="#D9D9D9", outline="")
canvas.create_text(32.0, 334.0, anchor="nw", text="Database", fill="#000000", font=("Inter", 16 * -1))
canvas.create_text(21.0, 388.0, anchor="nw", text="Target\npeptide list", fill="#000000", font=("Inter", 16 * -1), justify='center')
canvas.create_text(338.0, 335.0, anchor="nw", text="or", fill="#FFFFFF", font=("Inter", 16 * -1))
canvas.create_text(7.0, 293.0, anchor="nw", text="Pre-built database", fill="#FFFFFF", font=("Inter", 16 * -1))
canvas.create_text(420.0, 293.0, anchor="nw", text="Generate from .fasta", fill="#FFFFFF", font=("Inter", 16 * -1))
canvas.create_rectangle(414.0, 316.0, 773.0, 374.0, fill="#D9D9D9", outline="")
canvas.create_text(436.0, 335.0, anchor="nw", text="Database", fill="#000000", font=("Inter", 16 * -1))
canvas.create_rectangle(10.0, 466.0, 773.0, 579.0, fill="#D9D9D9", outline="")
canvas.create_text(25.0, 489.0, anchor="nw", text="Precursor error (ppm)", fill="#000000", font=("Inter", 16 * -1))
canvas.create_text(14.0, 540.0, anchor="nw", text="Modifications", fill="#000000", font=("Inter", 16 * -1))
canvas.create_text(280.0, 489.0, anchor="nw", text="Fragment error (Da)", fill="#000000", font=("Inter", 16 * -1))
button_modification = Button(text='Select Modifications', borderwidth=0, highlightthickness=0, command=print('Modifications'), relief="flat")
button_modification.place(x=125.0, y=535.0, width=150, height=30.0)
canvas.create_text(550.0, 489.0, anchor="nw", text="Max mods/peptide", fill="#000000", font=("Inter", 16 * -1), justify='center')
canvas.create_text(5.0, 436.0, anchor="nw", text="4. Database search", fill="#FFFFFF", font=("Inter", 24 * -1))
button_image_1 = PhotoImage(file=relative_to_assets("button_1.png"))
button_1 = Button(image=button_image_1, borderwidth=0, highlightthickness=0, command=begin_search, relief="flat")
button_1.place(x=9.0, y=820.0, width=401.0, height=59.0)
image_image_0 = PhotoImage(file=relative_to_assets("EndoGenius_Logo_12.png"))
image_0 = canvas.create_image(400.0, 60.0, image=image_image_0)
image_image_1 = PhotoImage(file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(617.0, 799.0, image=image_image_1)
canvas.create_text(390.0, 668.0, anchor="nw", text="FDR\nThreshold", fill="#000000", font=("Inter", 16 * -1), justify='center')
canvas.create_text(550.0, 668.0, anchor="nw", text="EndoGenius Score\nThreshold", fill="#000000", font=("Inter", 16 * -1), justify='center')
button_image_2 = PhotoImage(file=relative_to_assets("button_2.png"))
button_2 = Button(image=button_image_2, borderwidth=0, highlightthickness=0, command=formatted_MS2_path, relief="flat")
button_2.place(x=678.0, y=123.0, width=77.21710205078125, height=30.0)
entry_2 = Entry(bd=0, bg="#FFFFFF", highlightthickness=0, textvariable=input_path_MS2)
entry_2.place(x=131.0, y=123.0, width=146.0, height=28.0)
button_image_3 = PhotoImage(file=relative_to_assets("button_3.png"))
button_3 = Button(image=button_image_3, borderwidth=0, highlightthickness=0, command=raw_MS2_path, relief="flat")
button_3.place(x=282.0, y=123.0, width=77.21710205078125, height=30.0)
entry_3 = Entry(bd=0, bg="#FFFFFF", highlightthickness=0, textvariable=output_dir_path)
entry_3.place(x=168.0, y=764.0, width=146.0, height=28.0)
button_image_4 = PhotoImage(file=relative_to_assets("button_4.png"))
button_4 = Button(image=button_image_4, borderwidth=0, highlightthickness=0, command=output_path_get, relief="flat")
button_4.place(x=319.0, y=764.0, width=77.21710205078125, height=30.0)
entry_4 = Entry(bd=0, bg="#FFFFFF", highlightthickness=0, textvariable=fasta_path)
entry_4.place(x=531.0, y=329.0, width=146.0, height=28.0)
button_image_5 = PhotoImage(file=relative_to_assets("button_5.png"))
button_5 = Button(image=button_image_5, borderwidth=0, highlightthickness=0, command=fasta_db_get, relief="flat")
button_5.place(x=682.0, y=329.0, width=77.21710205078125, height=30.0)
entry_5 = Entry(bd=0, bg="#FFFFFF", highlightthickness=0, textvariable=database_csv_path)
entry_5.place(x=121.0, y=329.0, width=146.0, height=28.0)
button_image_6 = PhotoImage(file=relative_to_assets("button_6.png"))
button_6 = Button(image=button_image_6, borderwidth=0, highlightthickness=0, command=prebuilt_db_path, relief="flat")
button_6.place(x=272.0, y=329.0, width=77.21710205078125, height=30.0)
entry_6 = Entry(bd=0, bg="#FFFFFF", highlightthickness=0)
entry_6.insert(END, 'entry_6')
entry_6.place(x=121.0, y=388.0, width=146.0, height=28.0)
button_image_7 = PhotoImage(file=relative_to_assets("button_7.png"))
button_7 = Button(image=button_image_7, borderwidth=0, highlightthickness=0, command=lambda: print("button_7 clicked"), relief="flat")
button_7.place(x=272.0, y=388.0, width=77.21710205078125, height=30.0)
entry_7 = Entry(bd=0, bg="#FFFFFF", highlightthickness=0, textvariable=target_peptide_list_path)
entry_7.place(x=121.0, y=388.0, width=146.0, height=28.0)
button_image_8 = PhotoImage(file=relative_to_assets("button_8.png"))
button_8 = Button(image=button_image_8, borderwidth=0, highlightthickness=0, command=target_list_path_get, relief="flat")
button_8.place(x=272.0, y=388.0, width=77.21710205078125, height=30.0)
entry_8 = Entry(bd=0, bg="#FFFFFF", highlightthickness=0, textvariable=motif_db_path)
entry_8.place(x=141.0, y=624.0, width=146.0, height=28.0)
entry_10 = Entry(bd=0, bg="#FFFFFF", highlightthickness=0, textvariable=max_fragment_z)
entry_10.place(x=712.0, y=214.0, width=53.0, height=28.0)
entry_11 = Entry(bd=0, bg="#FFFFFF", highlightthickness=0, textvariable=max_precursor_z)
entry_11.place(x=537.0, y=213.0, width=53.0, height=28.0)
entry_12 = Entry(bd=0, bg="#FFFFFF", highlightthickness=0, textvariable=min_intensity)
entry_12.place(x=352.0, y=213.0, width=53.0, height=28.0)
entry_13 = Entry(bd=0, bg="#FFFFFF", highlightthickness=0, textvariable=mz_range_max)
entry_13.place(x=196.0, y=213.0, width=53.0, height=28.0)
entry_14 = Entry(bd=0, bg="#FFFFFF", highlightthickness=0, textvariable=mz_range_min)
entry_14.place(x=106.0, y=213.0, width=53.0, height=28.0)
entry_15 = Entry(bd=0, bg="#FFFFFF", highlightthickness=0, textvariable=max_mods_pep)
entry_15.place(x=685.0, y=483.0, width=53.0, height=28.0)
entry_16 = Entry(bd=0, bg="#FFFFFF", highlightthickness=0, textvariable=fragment_err)
entry_16.place(x=439.0, y=483.0, width=53.0, height=28.0)
entry_17 = Entry(bd=0, bg="#FFFFFF", highlightthickness=0, textvariable=precursor_err)
entry_17.place(x=189.0, y=483.0, width=53.0, height=28.0)
entry_18 = Entry(bd=0, bg="#FFFFFF", highlightthickness=0, textvariable=confident_coverage_threshold)
entry_18.place(x=685.0, y=621.0, width=53.0, height=28.0)
entry_20 = Entry(bd=0, bg="#FFFFFF", highlightthickness=0, textvariable=FDR_threshold)
entry_20.place(x=472.0, y=669.0, width=53.0, height=28.0)
entry_21 = Entry(bd=0, bg="#FFFFFF", highlightthickness=0, textvariable=eg_threshold)
entry_21.place(x=685.0, y=669.0, width=53.0, height=28.0)
button_image_9 = PhotoImage(file=relative_to_assets("button_9.png"))
button_9 = Button(image=button_image_9, borderwidth=0, highlightthickness=0, command=motif_db_get, relief="flat")
button_9.place(x=292.0, y=624.0, width=77.21710205078125, height=30.0)
canvas.create_rectangle(138.0, 544.0, 156.0, 562.0, fill="#D9D9D9", outline="")
canvas.create_rectangle(295.0, 544.0, 313.0, 562.0, fill="#D9D9D9", outline="")
canvas.create_rectangle(417.0, 544.0, 435.0, 562.0, fill="#D9D9D9", outline="")
canvas.create_rectangle(652.0, 544.0, 670.0, 562.0, fill="#D9D9D9", outline="")
canvas.create_rectangle(542.0, 544.0, 560.0, 562.0, fill="#D9D9D9", outline="")






window.resizable(False, False)
window.mainloop()
